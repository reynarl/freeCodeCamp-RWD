div{
  width: 500px;
  height: 100px;
  border-radius: 10px;
  text-align: center;
  color: white;
  margin: auto;
}

.animation{
  background: orangered;
  animation-name: rainbow;
  animation-duration: 4s;
  animation-iteration-count: infinite;
}

@keyframes rainbow{
  0%{
    background-color: yellowgreen;
  }
  50%{
    background-color: lightgreen;
  }
  100%{
    background-color: greenyellow;
  }
}

/* Animacion al poner cursor sobre el logo */
.logo img{
  width: 30px;
}

.logo img:hover{
  animation-name: width;
  animation-duration: 800ms;
  /* animation-fill-mode permite que la animación permanezca al tener el cursor sobre el logo */
  animation-fill-mode: forwards; 
}

@keyframes width{
  100%{
    width: 80px;
  }
}

/* Crear movimiento usando animación CSS

Cuando los elementos tienen una position, como fixed o relative, las propiedades de desplazamiento CSS right, left, top y bottom se pueden usar en las reglas de animación para crear movimiento. */

.move{
  position: relative;
  background-color: aquamarine;
  animation-name: moves;
  animation-duration: 5s;
}

/* Moviendo de arriba hacia abajo */
@keyframes moves{
  0%{
    background-color: aqua;
    top: 0px;
  }
  50%{
    background-color: aquamarine;
    top: 25px;
  }
  100%{
    background-color: aqua;
    top: -25px;
  }
}
/* Moviendo de lado a lado */

.move-left{
  position: relative;
  background-color: aquamarine;
  animation-name: moveLeft;
  animation-duration: 5s;
}

@keyframes moveLeft{
  0%{
    left: 0px;
    background-color: aqua;
  }
  50%{
    left: 50px;
    background-color: aquamarine;
  }
  100%{
    left: -50px;
    background-color: aqua;
  }
}

/* Desvaneciendo un elemento de izq a derecha */

.circle{
  background: linear-gradient(35deg, salmon, white);
  width: 200px;
  height: 200px;
  border-radius: 50%;
  margin-top: 50px;
  position: relative;
  animation-name: fade;
  animation-duration: 5s;
  animation-iteration-count: infinite;
}

@keyframes fade{
  0%{
    left: 0px;
  }
  50%{
    left: 20%;
    opacity: 0.1;
  }
  100%{
    left: 0px;
  }
}

/*  */
.animation-iteration{
  height: 400px;
  margin-top: 50px;
}

.ballon{
  background: linear-gradient(55deg, orange, rgb(255, 38, 0), yellow);
  width: 150px;
  height: 150px;
  border-radius: 50%;
  position: relative;
  animation-name: bounce;
  animation-duration: 1s;
  animation-iteration-count: infinite;
}

@keyframes bounce{
  0%{
    top: 0px;
  }
  50%{
    top: 70%;
    height: 120px;
    width: 200px;
  }
  100%{
    top: 0px;
  }
}

/*Duracion de las animaciones
animation-timing-function controla qué tan rápido un elemento animado cambia sobre la duración total de la animación.
El valor por defecto es ease, que empieza despacio, acelera en el medio y luego reduce la velocidad de nuevo al final.
ease-out: es rápida al inicio y luego reduce la velocidad
ease-in: es lenta al inicio y luego acelera al final, linear: aplica una velocidad constante a lo largo de la animación.*/

.balls{
  height: 500px;
  display: flex;
  justify-content: center;
}

.ball{
  background: linear-gradient(35deg, pink, rgb(0, 132, 255));
  width: 50px;
  height: 50px;
  border-radius: 50%;
  margin: 40px;
  position: relative;
  animation-name: animationTime;
  animation-duration: 3s;
  animation-iteration-count: infinite;
}

@keyframes animationTime{
  0%{
    top: 0px;
  }
  50%{
    top: 65%;
  }
  100%{
    top: 0px;
  }
}

#ball1{
  animation-timing-function: ease-in;
}
#ball2{
  animation-timing-function: ease-out;
}
#ball3{
  animation-timing-function: linear;
}
#ball4{
  animation-timing-function: cubic-bezier(0.3, 0.4, 0.5, 1.6);
}